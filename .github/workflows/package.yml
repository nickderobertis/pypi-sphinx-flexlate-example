
name: Test, Build and Push Python Package and Docs

on:
  push:
    branches:
      - "**"
    tags-ignore:
      - "**"
  pull_request:
    types: [closed]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      matrix:
        python-version: [3.8]

    steps:
      - name: Exit Workflow if PR but not Merged
        if: github.event.action == 'closed'
        run: |
          if [ !$GITHUB_PR_BASE == 'main' ]; then
            echo "Not merging into main, exiting workflow";
            exit 1;
          fi;
          if $GITHUB_PR_MERGED; then
            echo "PR merged, can continue workflow"
            exit 0;
          fi;
          echo "Got closed PR, not merged, exiting workflow";
          exit 1;
        env:
          GITHUB_PR_MERGED: ${{ github.event.pull_request.merged }}
          GITHUB_PR_BASE: ${{ github.event.pull_request.base.ref }}
      - uses: actions/checkout@v3
      - uses: ./.github/actions/install-dependencies
        with:
          python-version: ${{ matrix.python-version }}
      - name: Lint with flake8
        run: |
          pip install flake8
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Static Typing Checks with mypy
        run: |
          pipenv run mypy $(python directory.py)
      - name: Test with pytest
        run: |
          pipenv run python -m pytest --cov=./ --cov-report=xml
      - name: Upload coverage to Codecov
        if: github.ref == 'refs/heads/main'
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          flags: unittests
          name: codecov-pytest
          yml: ./codecov.yml

  collectTODO:
    if: github.ref == 'refs/heads/main'
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: "actions/checkout@master"
      - name: "TODO to Issue"
        uses: "alstr/todo-to-issue-action@v4.3"
        id: "todo"

  deploy:
    if: github.ref == 'refs/heads/main'
    needs: test
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      matrix:
        python-version: [3.8]
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/install-dependencies
        with:
          python-version: ${{ matrix.python-version }}
      - name: Get package name
        id: package_name
        run: echo ::set-output name=package_name::$(python name.py)
      - uses: nickderobertis/pypi-latest-version-action@master
        id: output_pypi_version
        with:
          package: ${{ steps.package_name.outputs.package_name }}
      - name: Output build version
        id: output_build_version
        run: |
          bash output-version.sh
      - uses: ./.github/actions/build-and-deploy-docs
        if: steps.output_pypi_version.outputs.version != steps.output_build_version.outputs.version
        with:
          gh-token: ${{ secrets.GH_TOKEN }}
      - name: Build PyPI Package
        if: steps.output_pypi_version.outputs.version != steps.output_build_version.outputs.version
        run: |
          pipenv run python upload.py --build-only
      - name: Upload PyPI Package
        if: steps.output_pypi_version.outputs.version != steps.output_build_version.outputs.version
        uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.pypi_password }}
      - name: Publish Github Release
        if: steps.output_pypi_version.outputs.version != steps.output_build_version.outputs.version
        uses: release-drafter/release-drafter@v5
        with:
          name: "v${{steps.output_build_version.outputs.version}}"
          tag: "v${{steps.output_build_version.outputs.version}}"
          version: "v${{steps.output_build_version.outputs.version}}"
          publish: true
        env:
          GITHUB_TOKEN: ${{ secrets.gh_token }}